// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: proto/reverse.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ReverseService_Reverse_FullMethodName = "/reverse.ReverseService/Reverse"
)

// ReverseServiceClient is the client API for ReverseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReverseServiceClient interface {
	Reverse(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseResponse, error)
}

type reverseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReverseServiceClient(cc grpc.ClientConnInterface) ReverseServiceClient {
	return &reverseServiceClient{cc}
}

func (c *reverseServiceClient) Reverse(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReverseResponse)
	err := c.cc.Invoke(ctx, ReverseService_Reverse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReverseServiceServer is the server API for ReverseService service.
// All implementations must embed UnimplementedReverseServiceServer
// for forward compatibility
type ReverseServiceServer interface {
	Reverse(context.Context, *ReverseRequest) (*ReverseResponse, error)
	mustEmbedUnimplementedReverseServiceServer()
}

// UnimplementedReverseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReverseServiceServer struct {
}

func (UnimplementedReverseServiceServer) Reverse(context.Context, *ReverseRequest) (*ReverseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reverse not implemented")
}
func (UnimplementedReverseServiceServer) mustEmbedUnimplementedReverseServiceServer() {}

// UnsafeReverseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReverseServiceServer will
// result in compilation errors.
type UnsafeReverseServiceServer interface {
	mustEmbedUnimplementedReverseServiceServer()
}

func RegisterReverseServiceServer(s grpc.ServiceRegistrar, srv ReverseServiceServer) {
	s.RegisterService(&ReverseService_ServiceDesc, srv)
}

func _ReverseService_Reverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReverseServiceServer).Reverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReverseService_Reverse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReverseServiceServer).Reverse(ctx, req.(*ReverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReverseService_ServiceDesc is the grpc.ServiceDesc for ReverseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReverseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reverse.ReverseService",
	HandlerType: (*ReverseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reverse",
			Handler:    _ReverseService_Reverse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reverse.proto",
}
